<Window x:Class="wpfChallenge.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:wpfChallenge"
        xmlns:vm="clr-namespace:wpfChallenge.ViewModels"
        mc:Ignorable="d"
        Title="LCR Game Simulator" Height="700" Width="500" FontSize="14">
    <Window.DataContext>
        <vm:LCRSimulatorViewModel/>
    </Window.DataContext>
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="35"/>
            <RowDefinition Height="90"/>
            <RowDefinition Height="45"/>
            <RowDefinition />
            <RowDefinition Height="10"/>
            <RowDefinition />
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>

        <TextBlock Text="LCR Game Simulator" Grid.Column="1" Grid.ColumnSpan="2" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="16" FontWeight="DemiBold" Height="21" Margin="42,7,41.5,7" Width="148"/>

        <!-- Settings (row1)-->
        <GroupBox Grid.Row="1" Header="Game Settings" Grid.ColumnSpan="4">
            <Grid Margin="10">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="10"/>
                    <ColumnDefinition/>

                </Grid.ColumnDefinitions>

                <TextBlock Text="Number of players" />
                <TextBox Text="{Binding NumberOfPlayers}" Grid.Row="1"/>

                <TextBlock Text="Number of games to play" Grid.Column="2" />
                <TextBox Text="{Binding NumberOfGamesToPlay}" Grid.Row="1" Grid.Column="2"/>

            </Grid>
        </GroupBox>

        <Button Content="Start Game!" Command="{Binding StartGamesCommand}" Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" Height="32"/>
        
        <!--Statistics (row 3)-->
        <GroupBox Header="Statistics" Grid.Row="3" Grid.ColumnSpan="4">
            
        </GroupBox>
        
        <!--Output-->
        <TextBlock Grid.Row="5" Text="Output:" Height="32"/>
        <TextBox Grid.Row="5" Grid.ColumnSpan="4" VerticalScrollBarVisibility="Auto" Text="he simplest concrete ViewModelBase subclass is CommandViewModel. It exposes a property called Command of type ICommand. MainWindowViewModel exposes a collection of theseobjects through its Commands property. The navigation area on theleft-hand side of the main window displays a link for each CommandViewModel exposed by MainWindowViewModel, such as &quot;View all customers&quot; and &quot;Create new customer.&quot; When the user clicks on a link, thus executing one of those commands, a workspace opens in the TabControl on the main window. The CommandViewModel class definition is shown here:&#xD;&#xA;&#xD;&#xA;C#&#xD;&#xA;&#xD;&#xA;Copy&#xD;&#xA;public class CommandViewModel : ViewModelBase&#xD;&#xA;{&#xD;&#xA;    public CommandViewModel(string displayName, ICommand command)&#xD;&#xA;    {&#xD;&#xA;        if (command == null)&#xD;&#xA;            throw new ArgumentNullException(&quot;command&quot;);&#xD;&#xA;        base.DisplayName = displayName;&#xD;&#xA;        this.Command = command;&#xD;&#xA;    }&#xD;&#xA;    public ICommand Command { get; private set; }&#xD;&#xA;}&#xD;&#xA;In the MainWindowResources.xaml file there exists a DataTemplate whose key is &quot;CommandsTemplate&quot;. MainWindow uses that template to render the collection of CommandViewModels mentioned earlier. The template simply renders each CommandViewModel object as a link in an ItemsControl. Each Hyperlink's Command property is bound to the Command property of a CommandViewModel. That XAML is shown in Figure 6.&#xD;&#xA;&#xD;&#xA;Figure 6 Render the List of Commands&#xD;&#xA;&#xD;&#xA;XML&#xD;&#xA;&#xD;&#xA;Copy&#xD;&#xA;&lt;!-- In MainWindowResources.xaml --&gt;&#xD;&#xA;&lt;!-- This template explains how to render the list of commands &#xD;&#xA;on the left side in the main window (the 'Control Panel' area). --&gt;&#xD;&#xA;&lt;DataTemplate x:Key=&quot;CommandsTemplate&quot;&gt;&#xD;&#xA;    &lt;ItemsControl ItemsSource=&quot;{Binding Path=Commands}&quot;&gt;&#xD;&#xA;        &lt;ItemsControl.ItemTemplate&gt;&#xD;&#xA;            &lt;DataTemplate&gt;&#xD;&#xA;                &lt;TextBlock Margin=&quot;2,6&quot;&gt; &#xD;&#xA;                    &lt;Hyperlink Command=&quot;{Binding Path=Command}&quot;&gt; &#xD;&#xA;                    &lt;TextBlock Text=&quot;{Binding Path=DisplayName}&quot; /&gt; &#xD;&#xA;                    &lt;/Hyperlink&gt; &#xD;&#xA;                &lt;/TextBlock&gt;&#xD;&#xA;            &lt;/DataTemplate&gt;&#xD;&#xA;        &lt;/ItemsControl.ItemTemplate&gt;&#xD;&#xA;    &lt;/ItemsControl&gt;&#xD;&#xA;&lt;/DataTemplate&gt;&#xD;&#xA;MainWindowViewModel Class&#xD;&#xA;As previously seen in the class diagram, the WorkspaceViewModelclass derives from ViewModelBase and adds the ability to close. By &quot;close,&quot; I mean that something removes the workspace from the user interface at run time. Three classes derive from WorkspaceViewModel: MainWindowViewModel, AllCustomersViewModel, and Customer" />

    </Grid>
</Window>
